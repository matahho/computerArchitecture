.data
values:   .word 1, 5, 8, 3, 2, 10, 4, 9, 6, 7
largest:  .word 0

.text
.globl _start

_start:
  la x1, values     # Load the address of the values array into x1
  li x2, 10         # Set x2 to the number of values to compare
  li x10, 0         # Initialize x10 to 0, which will hold the largest value

loop:
  lw x3, 0(x1)      # Load a value from memory into x3
  bge x3, x10, update_largest  # Branch to update_largest if x3 is greater than or equal 
to x10
  addi x1, x1, 4    # Increment the memory address by 4 bytes
  addi x2, x2, -1   # Decrement the counter
  bnez x2, loop     # Branch back to loop if x2 is not equal to zero
  j exit            # Jump to the exit if all values have been compared

update_largest:
  mv x10, x3        # Move the value from x3 to x10 (update the largest value)
  addi x1, x1, 4    # Increment the memory address by 4 bytes
  addi x2, x2, -1   # Decrement the counter
  bnez x2, loop     # Branch back to loop if x2 is not equal to zero

exit:
  la x1, largest    # Load the address of the largest variable into x1
  sw x10, 0(x1)     # Store the largest value into memory

  li a7, 10         # System call number 10 (exit)
  li a0, 0          # Exit code 0
  ecall             # Make the system call to exit


